terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  profile = "labuser1"
  region  = "ap-south-1"
}

// Remove random_string for suffix, backend generates full username now
/*
resource "random_string" "suffix" {
  length  = 8
  special = false
  upper   = false
}
*/

// Remove random_password resource, backend generates password
/*
resource "random_password" "user_password" {
  length           = 16
  special          = true
  override_special = "!@#$%^&*"
  min_special      = 2
  min_upper        = 2
  min_lower        = 2
  min_numeric      = 2
}
*/

// Add variable for username passed from backend
variable "user_name_tf" {
  description = "The IAM username generated by the backend"
  type        = string
}

resource "aws_iam_user" "lab_user" {
  // Use the variable for the name
  name = var.user_name_tf 
  path = "/lab-users/"
  force_destroy = true
}

resource "aws_iam_user_login_profile" "lab_user_login" {
  user                    = aws_iam_user.lab_user.name
  // Password will be set by backend SDK after creation
  // Keep password_reset_required = false
  password_reset_required = false 
  // password_length argument is ignored if password_reset_required is false or omitted.
  // password_length        = 20 
}

resource "aws_iam_access_key" "lab_user_key" {
  user = aws_iam_user.lab_user.name
}

resource "aws_iam_user_policy" "lab_user_policy" {
  name = "lab_access"
  user = aws_iam_user.lab_user.name

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "s3:*"
        ]
        Resource = [
          "arn:aws:s3:::*", // Allow access to all buckets
          "arn:aws:s3:::*/*" // And their contents
        ]
      },
      {
        Effect = "Allow"
        Action = [
          "s3:CreateBucket", 
          "s3:ListAllMyBuckets"
        ]
        Resource = "*" // These actions need to be on all resources
      },
      {
        Effect = "Allow"
        Action = [
          "iam:GetAccountPasswordPolicy",
          "iam:ChangePassword",
          "iam:GetUser"
        ]
        Resource = [
          "arn:aws:iam::*:user/$${aws:username}"
        ]
      }
    ]
  })
}

// ... rest of the file ...

output "user_name" {
  // Output the username that was input
  value = var.user_name_tf
}

output "access_key_id" {
  value = aws_iam_access_key.lab_user_key.id
}

output "secret_access_key" {
  value     = aws_iam_access_key.lab_user_key.secret
  sensitive = true
}

// Remove password output
/*
output "password" {
  value     = aws_iam_user_login_profile.lab_user_login.password
  sensitive = true
}
*/

output "bucket_name" {
  // Bucket name still uses a random suffix, let's adjust
  // Option 1: Keep random suffix for bucket (requires random_string again)
  // Option 2: Derive bucket name from username suffix (if backend generates predictable suffix)
  // Option 3: Pass bucket name from backend too?
  // Let's keep random_string for bucket suffix for now to minimize changes
  value = aws_s3_bucket.lab_bucket.id
}

// Re-add random_string for bucket suffix if needed
resource "random_string" "bucket_suffix" {
  length  = 8
  special = false
  upper   = false
}

resource "aws_s3_bucket" "lab_bucket" {
  // Use the separate random string for the bucket name
  bucket = "lab1-${random_string.bucket_suffix.result}" 
  force_destroy = true
}

resource "aws_s3_bucket_public_access_block" "lab_bucket" {
  bucket = aws_s3_bucket.lab_bucket.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}